-- ‚úÖ **Function Forward Declarations**
local moveTo, saveProgress, loadProgress, placeBlock, buildSchematic, restock, refuelTurtle, findChestAccess, getChestYLevel, getBlockData

-- ‚úÖ **Restore Disk Startup for Future Turtles**
if peripheral.find("drive") then
    print("üîÑ Restoring disk startup...")
    if fs.exists("/disk/startuptemp.lua") then
        shell.run("mv /disk/startuptemp.lua /disk/startup.lua")
        print("‚úÖ Disk startup restored.")
    end
end

-- ‚úÖ **Load Progress or Set Default Start Position**
local function loadProgress()
    if fs.exists("progress.txt") then
        local file = fs.open("progress.txt", "r")
        local data = textutils.unserialize(file.readAll())  
        file.close()
        if data and data.index and data.pos then
            print("üîÑ Resuming from saved position:", data.pos.x, data.pos.y, data.pos.z)
            return data.index, data.pos
        end
    end
    return 1, {x = 0, y = 0, z = -5, dir = 0}
end

-- ‚úÖ **Save Progress Function**
local function saveProgress(index, position)
    local file = fs.open("progress.txt", "w")
    file.write(textutils.serialize({index = index, pos = position}))
    file.close()
end

-- ‚úÖ **Set Starting Position**
local buildIndex, pos = loadProgress()

if buildIndex == 1 then
    rednet.open("right")
    local _, turtleID = rednet.receive("turtle_id")
    if not turtleID then return end

    print("‚úÖ Received Turtle ID:", turtleID)

    -- ‚úÖ **Refuel Once at Startup**
    for i = 1, 16 do
        if turtle.getItemCount(i) > 0 then
            turtle.select(i)
            if turtle.refuel(1) then
                print("‚õΩ Refueled with 1 Aeternus Fuel Block.")
                break
            end
        end
    end

    -- ‚úÖ **Send Confirmation to Placer Turtle**
    rednet.broadcast("moved", "turtle_status")
    rednet.close("right")

    -- ‚úÖ **Check for Block Data & Download if Needed**
    if not fs.exists("output.lua") then
        print("üåê Block data not found! Downloading...")
        local dataURL = "https://raw.githubusercontent.com/robertjojo123/limpy3/main/output_" .. turtleID .. ".lua"
        shell.run("wget " .. dataURL .. " output.lua")

        if not fs.exists("output.lua") then
            print("‚ùå Failed to download block data. Exiting.")
            return
        end
    end
end

print("üîÑ Loading block data...")
local blocks = dofile("output.lua")

-- ‚úÖ **Refuel Function (FULLY RESTORED)**
refuelTurtle = function()
    print("‚õΩ Checking fuel level...")
    if turtle.getFuelLevel() >= 1000 then return true end 

    print("üîÑ Moving to fuel chest...")
    moveTo({x = 5, y = 0, z = -5})  -- Fuel chest at lowest level
    while pos.dir ~= 3 do turnLeft() end

    while true do
        if turtle.suck(1) then
            turtle.refuel()
            print("‚úÖ Refueled!")
            return true
        end
        print("‚è≥ Fuel chest empty. Retrying in 2 seconds...")
        sleep(2)
    end
end

-- ‚úÖ **Movement System**
local function turnLeft() turtle.turnLeft(); pos.dir = (pos.dir - 1) % 4 end
local function turnRight() turtle.turnRight(); pos.dir = (pos.dir + 1) % 4 end

moveTo = function(target)
    while pos.x ~= target.x do
        if pos.x < target.x then while pos.dir ~= 1 do turnRight() end
        else while pos.dir ~= 3 do turnRight() end
        end
        while not turtle.forward() do
            print("üöß Block ahead! Trying alternative path...")
            turtle.turnRight()
            if not turtle.forward() then
                turtle.turnLeft()
            end
        end
        pos.x = target.x  
    end

    while pos.z ~= target.z do
        if pos.z < target.z then while pos.dir ~= 0 do turnRight() end
        else while pos.dir ~= 2 do turnRight() end
        end
        while not turtle.forward() do
            print("üöß Block ahead! Trying alternative path...")
            turtle.turnRight()
            if not turtle.forward() then
                turtle.turnLeft()
            end
        end
        pos.z = target.z  
    end
end

-- ‚úÖ **Find Chest Level Based on Block Type**
getChestYLevel = function(block)
    local blockYLevels = {
        ["wool"] = 1, ["stone"] = 2, ["sand"] = 3, ["dirt"] = 4, ["glass"] = 5,
        ["oak_planks"] = 6, ["spruce_planks"] = 7, ["bricks"] = 8, ["quartz_block"] = 9
    }
    return blockYLevels[block] or 10
end

-- ‚úÖ **Block Data Automation**
getBlockData = function(block)
    return "minecraft:" .. block
end

-- ‚úÖ **Restock Function**
restock = function(block)
    local blockID = getBlockData(block)  
    local chestY = getChestYLevel(block)  
    local chestPos = {x = 5, y = chestY, z = -5}

    print("üîÑ Moving to restock", blockID)
    moveTo(chestPos)
    while pos.dir ~= 3 do turnLeft() end

    if turtle.suck(64) then
        print("‚úÖ Restocked", blockID)
        return true
    else
        print("‚ùå No", blockID, "available! Waiting for resupply...")
        while not turtle.suck(64) do
            print("‚è≥ Waiting for more", blockID, "in chest...")
            sleep(2)
        end
        print("‚úÖ Finally restocked", blockID)
        return true
    end
end

-- ‚úÖ **Place Block Function**
placeBlock = function(block)
    local blockID = getBlockData(block)  
    if not refuelTurtle() then return false end 

    local exists, _ = turtle.inspectDown()
    if exists then
        print("‚è≠ Block already exists, skipping...")
        return true
    end

    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == blockID then
            turtle.select(i)
            if turtle.placeDown() then
                print("‚úÖ Placed", blockID)
                return true
            end
        end
    end

    print("‚ùå Out of", blockID, "restocking...")
    if restock(block) then return placeBlock(block) end
    return false
end

-- ‚úÖ **Build Process**
buildSchematic = function()
    print("üèó Starting build process...")
    for _, blockData in ipairs(blocks) do
        moveTo({x = blockData.x, y = blockData.y, z = blockData.z})
        while not placeBlock(blockData[1]) do
            print("üîÑ Retrying placement after restock")
        end
    end
    print("‚úÖ Build complete!")
end

buildSchematic()
