-- ✅ **Function Forward Declarations**
local moveTo, savePosition, returnToLastPosition, restock, placeBlock, buildSchematic, refuelTurtle

-- ✅ **Restore Disk Startup for Future Turtles**
if peripheral.find("drive") then
    print("🔄 Disk detected. Restoring disk startup file...")
    if fs.exists("/disk/startuptemp.lua") then
        shell.run("mv /disk/startuptemp.lua /disk/startup.lua")
        print("✅ Disk startup restored.")
    end
end

print("🔄 Checking for block data...")
if not fs.exists("output.lua") then
    print("🔄 No block data found. Waiting for Rednet assignment...")
    rednet.open("right")  -- Worker Turtle's Rednet Modem is on the right
    local _, turtleID = rednet.receive("turtle_id")  -- Wait for ID
    
    print("✅ Received Turtle ID:", turtleID)
    local dataURL = "https://raw.githubusercontent.com/robertjojo123/olympus2/main/output_" .. turtleID .. ".lua"

    print("🌐 Downloading block data from", dataURL)
    shell.run("wget " .. dataURL .. " output.lua")

    if fs.exists("output.lua") then
        print("✅ Block data downloaded successfully.")
    else
        print("❌ Failed to download block data. Exiting.")
        return
    end
end

print("🔄 Loading block data...")
local blocks = dofile("output.lua")

-- ✅ **Position Tracking**
local pos = {x = 0, y = 0, z = 0, dir = 0}

if turtle.forward() then
    pos = {x = 0, y = 0, z = -1, dir = 0}  -- The turtle is facing +Z
    turtle.back()  -- Move back to avoid blocking future turtles
end

print("✅ Build reference set at", pos.x, pos.y, pos.z)

-- ✅ **Save Progress Function**
local function saveProgress(index)
    local file = fs.open("progress.txt", "w")
    file.writeLine(index)
    file.close()
end

-- ✅ **Load Progress Function**
local function loadProgress()
    if fs.exists("progress.txt") then
        local file = fs.open("progress.txt", "r")
        local index = tonumber(file.readLine())
        file.close()
        return index or 1
    end
    return 1
end

-- ✅ **Movement Functions**
local function turnLeft() turtle.turnLeft(); pos.dir = (pos.dir - 1) % 4 end
local function turnRight() turtle.turnRight(); pos.dir = (pos.dir + 1) % 4 end

local function moveForward()
    if turtle.forward() then
        if pos.dir == 0 then pos.z = pos.z + 1
        elseif pos.dir == 1 then pos.x = pos.x + 1
        elseif pos.dir == 2 then pos.z = pos.z - 1
        elseif pos.dir == 3 then pos.x = pos.x - 1
        end
        return true
    end
    return false
end

moveTo = function(target)
    while pos.x ~= target.x do
        if pos.x < target.x then while pos.dir ~= 1 do turnRight() end
        else while pos.dir ~= 3 do turnRight() end
        end
        moveForward()
    end
    while pos.z ~= target.z do
        if pos.z < target.z then while pos.dir ~= 0 do turnRight() end
        else while pos.dir ~= 2 do turnRight() end
        end
        moveForward()
    end
end

-- ✅ **Updated Place Block Function (Skips Existing Blocks)**
placeBlock = function(block)
    local exists, data = turtle.inspectDown()
    if exists then
        print("⏭ Block already exists, skipping...")
        return true  -- Skip to the next block
    end

    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == "minecraft:" .. block then
            turtle.select(i)
            if turtle.placeDown() then
                print("✅ Placed", block)
                return true
            end
        end
    end

    print("❌ Out of", block, "restocking...")
    if restock(block) then return placeBlock(block) end
    return false
end

-- ✅ **Updated Build Function (Resumes from Last Position)**
buildSchematic = function()
    local startIndex = loadProgress()  -- Load last saved position
    for i = startIndex, #blocks do
        local blockData = blocks[i]
        local target = {x = pos.x + blockData.x, y = pos.y + blockData.y, z = pos.z + blockData.z}
        moveTo(target)
        if placeBlock(blockData[1]) then
            saveProgress(i + 1)  -- Save progress after successful placement
        end
    end
    print("✅ Build complete!")

    -- ✅ **Signal Placer Turtle that the worker has moved**
    rednet.open("right")
    rednet.broadcast("moved", "turtle_status")
    rednet.close("right")
end

-- ✅ **Start Building**
buildSchematic()
