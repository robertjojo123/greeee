-- ‚úÖ **Function Forward Declarations**
local moveTo, savePosition, returnToLastPosition, restock, placeBlock, buildSchematic, refuelTurtle

-- ‚úÖ **Restore Disk Startup for Future Turtles**
if peripheral.find("drive") then
    print("üîÑ Restoring disk startup...")
    if fs.exists("/disk/startuptemp.lua") then
        shell.run("mv /disk/startuptemp.lua /disk/startup.lua")
        print("‚úÖ Disk startup restored.")
    end
end

-- ‚úÖ **Wait for Rednet ID**
rednet.open("right")
local _, turtleID = rednet.receive("turtle_id")
if not turtleID then
    print("‚ùå ERROR: No Turtle ID received!")
    return
end

print("‚úÖ Received Turtle ID:", turtleID)

-- ‚úÖ **Refuel Before Moving**
for i = 1, 16 do
    if turtle.getItemCount(i) > 0 then
        turtle.select(i)
        if turtle.refuel(1) then
            print("‚õΩ Refueled with 1 Aeternus Fuel Block.")
            break
        end
    end
end

-- ‚úÖ **Move Forward One Block**
if turtle.forward() then
    print("‚úÖ Moved forward one block.")
else
    print("‚ùå ERROR: Failed to move forward!")
    return
end

-- ‚úÖ **Send Confirmation to Placer Turtle**
rednet.open("right")
rednet.broadcast("moved", "turtle_status")
rednet.close("right")

-- ‚úÖ **Download Block Data**
local dataURL = "https://raw.githubusercontent.com/robertjojo123/olympus2/main/output_" .. turtleID .. ".lua"

print("üåê Downloading block data from", dataURL)
shell.run("wget " .. dataURL .. " output.lua")

if not fs.exists("output.lua") then
    print("‚ùå Failed to download block data. Exiting.")
    return
end

print("üîÑ Loading block data...")
local blocks = dofile("output.lua")

-- ‚úÖ **Position Tracking**
local pos = {x = 0, y = 0, z = 0, dir = 0}
local lastPos = {x = 0, y = 0, z = 0, dir = 0}

-- ‚úÖ **Save and Return to Position**
savePosition = function()
    lastPos = {x = pos.x, y = pos.y, z = pos.z, dir = pos.dir}
end

returnToLastPosition = function()
    moveTo(lastPos)
    while pos.dir ~= lastPos.dir do turnRight() end
end

-- ‚úÖ **Movement Functions**
local function turnLeft() turtle.turnLeft(); pos.dir = (pos.dir - 1) % 4 end
local function turnRight() turtle.turnRight(); pos.dir = (pos.dir + 1) % 4 end

moveTo = function(target)
    while pos.x ~= target.x do
        if pos.x < target.x then while pos.dir ~= 1 do turnRight() end
        else while pos.dir ~= 3 do turnRight() end
        end
        turtle.forward()
    end
    while pos.z ~= target.z do
        if pos.z < target.z then while pos.dir ~= 0 do turnRight() end
        else while pos.dir ~= 2 do turnRight() end
        end
        turtle.forward()
    end
end

-- ‚úÖ **Restock Function**
restock = function(block)
    print("üîÑ Restocking " .. block)
end

-- ‚úÖ **Updated Place Block Function (Skips Existing Blocks)**
placeBlock = function(block)
    local exists, _ = turtle.inspectDown()
    if exists then
        print("‚è≠ Block already exists, skipping...")
        return true
    end

    for i = 1, 16 do
        local item = turtle.getItemDetail(i)
        if item and item.name == "minecraft:" .. block then
            turtle.select(i)
            if turtle.placeDown() then
                print("‚úÖ Placed", block)
                return true
            end
        end
    end

    print("‚ùå Out of", block, "restocking...")
    if restock(block) then return placeBlock(block) end
    return false
end

-- ‚úÖ **Build Process**
buildSchematic = function()
    print("üèó Starting build process...")
    for _, blockData in ipairs(blocks) do
        moveTo(blockData)
        placeBlock(blockData[1])
    end
    print("‚úÖ Build complete!")
end

-- ‚úÖ **Start Building**
buildSchematic()
